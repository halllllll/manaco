import { delay, http, HttpResponse } from 'msw';
import { mockTeacherData } from './teacherData';

// 現在の選択中の教員ID
let currentTeacherId = 'teacher-1';
// 現在のクラスフィルター
let currentClassFilter = 'all';

// MSWのライフサイクルイベントを購読（devtoolからのユーザー変更通知を受け取る）
window.addEventListener('message', (event) => {
  if (event.data.type === 'MSW_SET_TEACHER') {
    currentTeacherId = event.data.teacherId;
    currentClassFilter = event.data.classFilter;
    console.log(
      `[MSW] Teacher changed to ${currentTeacherId}, Class filter: ${currentClassFilter}`,
    );
  }
});

// 教師用APIのハンドラ
export const teacherHandlers = [
  // 現在のログイン中の教員情報取得
  http.get('/api/teacher/current', async () => {
    await delay(300);
    const teacher = mockTeacherData.teachers.find((t) => t.id === currentTeacherId);

    if (!teacher) {
      return new HttpResponse(JSON.stringify({ error: 'Teacher not found' }), { status: 404 });
    }

    return HttpResponse.json(teacher);
  }),

  // 全生徒リスト取得
  http.get('/api/teacher/students', async ({ request }) => {
    await delay(500);
    const url = new URL(request.url);
    const classFilter = url.searchParams.get('class') || currentClassFilter;

    console.log('[MSW] Students API called. Class filter:', classFilter);

    let students = mockTeacherData.students;

    // クラスでフィルタリング
    if (classFilter !== 'all') {
      students = students.filter((s) => s.belonging === classFilter);
    }

    console.log('[MSW] Returning students:', students);
    return HttpResponse.json(students);
  }),

  // 生徒の詳細情報取得（ID指定）
  http.get('/api/teacher/students/:id', async ({ params }) => {
    await delay(400);
    const { id } = params;
    const student = mockTeacherData.students.find((s) => s.id === String(id));

    if (!student) {
      return new HttpResponse(JSON.stringify({ error: 'Student not found' }), { status: 404 });
    }

    // 生徒の学習活動データを取得
    const activities = mockTeacherData.activities[student.id] || [];

    // 生徒情報と学習活動データを結合
    const studentWithActivities = {
      ...student,
      activities,
    };

    return HttpResponse.json(studentWithActivities);
  }),

  // クラス一覧取得
  http.get('/api/teacher/classes', async () => {
    await delay(300);
    return HttpResponse.json(mockTeacherData.classes);
  }),

  // 学習活動の概要データ取得（ダッシュボード用）
  http.get('/api/teacher/dashboard', async () => {
    await delay(600);
    console.log('[MSW] Dashboard API called. Mock data available:', {
      students: mockTeacherData.students.length,
      activities: Object.keys(mockTeacherData.activities).length,
      classes: mockTeacherData.classes.length,
    });

    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate())
      .toISOString()
      .split('T')[0];

    // 今週の日曜日を計算
    const dayOfWeek = now.getDay();
    const startOfWeek = new Date(now);
    startOfWeek.setDate(now.getDate() - dayOfWeek);
    const startOfWeekStr = startOfWeek.toISOString().split('T')[0];

    let totalActivitiesToday = 0;
    let totalActivitiesThisWeek = 0;

    // 各生徒の活動を集計
    for (const studentActivities of Object.values(mockTeacherData.activities)) {
      // 今日の活動
      const todayActivities = studentActivities.filter(
        (activity) => activity.activityDate === today,
      );
      totalActivitiesToday += todayActivities.length;

      // 今週の活動
      const weekActivities = studentActivities.filter(
        (activity) => activity.activityDate >= startOfWeekStr,
      );
      totalActivitiesThisWeek += weekActivities.length;
    }

    // 直近10日間の活動状況を集計
    const last10Days = [];
    for (let i = 0; i < 10; i++) {
      const date = new Date(now);
      date.setDate(now.getDate() - i);
      const dateStr = date.toISOString().split('T')[0];

      const dayData: {
        date: string;
        displayDate: string;
        activities: Record<string, boolean>;
      } = {
        date: dateStr,
        displayDate: `${date.getMonth() + 1}/${date.getDate()}`,
        activities: {},
      };

      // 各生徒の活動状況
      for (const student of mockTeacherData.students) {
        const studentActivities = mockTeacherData.activities[student.id] || [];
        const hasActivity = studentActivities.some(
          (activity) => activity.activityDate === dateStr,
        );

        dayData.activities[student.id] = hasActivity;
      }

      last10Days.push(dayData);
    }

    const result = {
      totalStudents: mockTeacherData.students.length,
      todayActivities: totalActivitiesToday,
      weekActivities: totalActivitiesThisWeek,
      activityHeatmap: last10Days,
    };

    console.log('[MSW] Dashboard response data prepared:', {
      students: result.totalStudents,
      heatmapDays: result.activityHeatmap.length,
    });
    return HttpResponse.json(result);
  }),
];
